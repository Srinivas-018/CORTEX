# Example Nginx configuration for CORTEX with S3 Upload Backend
# Save to: /etc/nginx/sites-available/cortex

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=100r/s;

upstream streamlit {
    server localhost:8501;
}

upstream fastapi {
    server localhost:8001;
}

# HTTP - Redirect to HTTPS
server {
    listen 80;
    server_name your-domain.com www.your-domain.com;
    
    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS - Main application
server {
    listen 443 ssl http2;
    server_name your-domain.com www.your-domain.com;
    
    # SSL Configuration (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Logging
    access_log /var/log/nginx/cortex_access.log;
    error_log /var/log/nginx/cortex_error.log;
    
    # Streamlit Application
    location / {
        limit_req zone=general_limit burst=20 nodelay;
        
        proxy_pass http://streamlit;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering off;
        proxy_buffer_size 4k;
        
        # Note: client_max_body_size doesn't matter for direct S3 uploads
        # But keep reasonable for other endpoints
        client_max_body_size 100M;
    }
    
    # Streamlit WebSocket (required for real-time updates)
    location /_stcore/stream {
        proxy_pass http://streamlit/_stcore/stream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 86400;
    }
    
    # FastAPI S3 Upload Backend
    location /api/ {
        limit_req zone=upload_limit burst=5;
        
        proxy_pass http://fastapi/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # CORS headers (if needed)
        add_header Access-Control-Allow-Origin "https://your-domain.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Static files (if any)
    location /static/ {
        alias /opt/CORTEX/static/;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
}

# Installation Instructions:
# 1. Copy this file to /etc/nginx/sites-available/cortex
# 2. Update server_name with your domain
# 3. Update SSL certificate paths (use certbot for Let's Encrypt)
# 4. Create symbolic link:
#    sudo ln -s /etc/nginx/sites-available/cortex /etc/nginx/sites-enabled/
# 5. Test configuration:
#    sudo nginx -t
# 6. Reload Nginx:
#    sudo systemctl reload nginx
#
# To get Let's Encrypt SSL certificate:
# sudo apt-get install certbot python3-certbot-nginx
# sudo certbot --nginx -d your-domain.com -d www.your-domain.com
